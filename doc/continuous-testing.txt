======================================================================================
                                                          *continuous-testing*


This plugin attaches attaches autocommands to test files. These tests are 
executed on every file change of a certain file type depending on the test framework.
Run tests async on save, add to diagnostics, get notified on failures.


======================================================================================
1. Plugin structure                                       *continuous-testing.structure*

- languages/        Implementation of testing frameworks
- utils/            All utils which could in theory be used outside of this plugin
- commands.lua      Setup of autocmds etc
- config.lua        Responsible for parsing the user config
- state.lua         Keeps track of the global state
- telescope.lua     Responsible for the telescope window

                                                          *continuous-testing.signs*
This plugin defines following signs to set in the
|continuous-testing.test_module.test_result_handler()|

- test_success = 
- test_failure = 
- test_skipped = 嶺
- test_other = 
- test_running = 累

======================================================================================
2. Supported test frameworks                              *continuous-testing.test_frameworks*

When adding support for a test framework, place the implemented framework under `languages/$FILETYPE/$FRAMEWORK.lua`.

This file should contain the following functions:

test_module.command( {bufnr} )                                    *continuous-testing.test_module.command()*
    Returns the test command (string) which is executed on save.

    Parameters: 
      {bufnr}  (number) The bufnr of the test file.

    Return:
      Test command as string

test_module.test_result_handler( {bufnr}, {cmd} )                *continuous-testing.test_module.test_result_handler()*
    Returns a function which runs (a test job) every time files are changed.
    The returned function should return the job_id on its turn.
    This is the main autocommand callback.
    In general, it should handle the following things:
      - Run the test of the bufnr.
      - Parse the output and set the state for the test (`state(bufnr)`)
        - For each test
            - Initialize and set diagnostics. (`common.add_diagnostics_to_state`) 
            - Place result sign.
        - Publish the diagnostics which were set in the state with `common.publish_diagnostics`.
        - Set `telescope_status` based on test results.
        - Set summary after all tests ran. (`summary_line` and
          `summary_log_level`).

    Parameters: 
      {bufnr}  (number) The bufnr of the test file.
      {cmd}    (string) A command to execute the test with a placeholder `%file`.

    Return:
      Callback function with a return type of number representing a job_id, which runs on every autocmd


test_module.testing_dialog_message( {bufnr}, {line_position} )    *continuous-testing.test_module.testing_dialog_message()*
    Returns the failure message including a backtrace on this position.
    Ideally, this can be retrieved from the global state.

    Parameters: 
      {bufnr}          (number) The bufnr of the test file.
      {line_position}  (number) The line number of the failing test.

test_module.initialize_state( {bufnr} )                          *continuous-testing.test_module.start_signs()*
    - Places start signs (by making use of `common.place_start_sign`) in the
    test buffer. 
    - Set some state values for each test line (in `state(bufnr).test_results[line]`)

    For example, determine lines of tests with treesitter.

    Parameters: 
      {bufnr}          (number) The bufnr of the test file.


*continuous-testing.ruby.rspec*

State table specifications:

{ 
    version = ...,
    seed = ...,
    test_results = {
        [line_number]: {
            status = ..., // "passed", "failed", "pending"
            description = ...,
            file_path = ...,
            line_number = ...,
            run_time = ...,
            exception = {
                class = ...,
                message = ...,
                backtrace = ...,
            }
        }
    },
    telescope_status = {},
    diagnostics = {},
    summary_line = ...,
    summary_log_level = vim.log.levels.{},
    job = job_id
}

*continuous-testing.javascript.vitest*

State table specifications:
{
    numTotalTests = ...,
    test_results = {
        [line_number]: {
                status = ..., // "passed", "failed", "pending"
                ancestorTitles = {},
                fullName = ...,
                title = ...,
                duration = ...,
                failureMessages = {},
            },
        },
    },
    telescope_status = {},
    diagnostics = {},
    summary_line = ...,
    summary_log_level = vim.log.levels.{},
    job = job_id
}

vim:tw=78:ts=8:ft=help:norl:
